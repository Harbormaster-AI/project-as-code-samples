#
# Standard DevOps project creation options.  
#
# Pay close attention to parameters that require values unique  
# to you, such as those for Git, Docker, and AWS.
#
# To use Git, Docker, and any provider, be sure to have created
# an account with each.  
#
# For Git, before generating the project be sure to create the 
# repository and designate as public before
#

project:
    name: AWS Lambda NoSQL Demo
    description: Sample AWS Lambda Serverless using MongoDB project
    
    techstack:
       name:              LambdaNoSQL      # To see the list of available tech stacks on a Harbormaster instance using command:
                                           #     harbormaster_cli stack_list --output pretty

    model:
        name:             bowling-league-Sprint-1
                          # options:     Unique name of an existing model, a URL to a model file or Git repo, 
                          #                or full/relative path to a model file.
                          #
                          # To see the list of supported model types use command:
                          #      harbormaster_cli model_types_supported
                          #                          
                          # To see the list of available models on a Harbormaster instance use command:
                          #      harbormaster_cli model_list --output pretty
                          # 
                          # For JAR files and Git Repos with Java Files, include the root package names of the root package
#        javaRootPackageNames:
#          - com.freeport.bo    
#        primaryKeyPattern: _pojoName_Id # the pattern to look for when interrogating a POJO for a primary key field
                              # allowed values are a either a literal, ex: id OR 
                              # POJOName with a suffix, ex: _pojoName_Id will handle accountId, customerId, etc...                 

#
# DevOps Project Creation Options
#    	
    options:

#            
# Application parameters
#            
    
        application:
            name:                  lambdamongodemo
            description:           Demo AWS Lambda-MongoDB project generated by Harbormaster
            author:                Dev Team
            email:                 dev@harbormaster.ai
            application logo URL:  ./img/turnstone.biologics.png
            company name:          Turnstone Biologics
            version:               0.0.1
            package name:          com.freeport
                         
#            
# CI/CD parameters
#            
        cicd:
            platform:  circleci    # options:  codeship, circleci, jfrog.pipelines
                                   #           jenkins, azure, aws, gitlab, 
                                   #           bitbucket, github 
            AES key:   xxxxx       # this is required for CodeShip 
            

#
# Git repository parameters
#
        git:            
            name:        git_test_Lambda    # an arbitrary name, but for JFrog, this should be the name of the Git related integration
            username:    xxxxxxxxxxxx
            password:    xxxxxxxxxxxx
            repository:  xxxxxxxxx
            tag:         xxxxxxxxx
            host:        bitbucket.org            

#
# HashiCorp Terraform parameters
#
        terraform:
            inUse:             true	
            provider:          aws        # options: aws, google, azure, nutanix
            region:            us-east-1  # options: any cloud provider region
            ssh-fingerprint:   50:36:21:3f:3e:fd:de:fc:2f:1f:17:a6:09:6d:1b:dd     # CircleCI requires this for SSH
            
            
#
# AWS and Lambda parameters 
#
        aws-lambda:
            key-pair-name:     my-public-key
            access-key:        ASSIGN_ON_CICD_PLATFORM_AS_ENV_VAR
            secret-key:        ASSIGN_ON_CICD_PLATFORM_AS_ENV_VAR
            s3Bucket:          Harbormasterdemobucket
            region:            us-east-1 # the AWS vpc to create the mongodb instance requires this region
            runtime:           java8				# options: java8,nodejs6.10,nodejs8.10
            useKinesis:        false
            kinesisStreamName: xxxxxxxxxx			# use with caution since billing charges will incur
            lambdaRoleArn:     arn:aws:iam::110777515443:role/service-role/myRoleName           # ex: arn:aws:iam::xxxxxxxxxxx:role/service-role/myRoleName
            timeout:           30
            memorySize:        512
            forceUpdate:       true
            publish:           true
            funcNamePrefix:    lambdaFunc_
            crudDeclStrategy:  methodsPerClass
                               # options:
                               # methodsPerClass = (default) each class contains a set of public facing CRUD calls
                               # uberMethodPerClass = one public facing method to handle all CRUD calls per class
                               # uberMethod = one public facing method to handle all CRUD calls for all classes
            vpcSubnetIds:
            vpcSecurityGroupIds: 
            delegateDAOHost:
            delegateDAOPort:
			

#            
# Swagger parameters - see https://swagger.io/docs/specification/2-0/basic-structure/ for valid options   
#
            
        swagger:
            host:              
            basepath:           /
            contactName:       Harbormaster Dev
            contactEmail:      dev@harbormaster.ai
            contactUrl:
            licenseUrl:        http://www.apache.org/licenses/LICENSE-2.0.html
            licenseName:       Apache 2.0
            title:              Lambda Functions Swagger
            version:            v1.0
            description:        Swagger file for Lambda Functions
            termsOfService:
            outputFormats:     json
            
#
# Nutanix parameters
#
        nutanix:
            inUse:         false
            userName:      xxxxxxxxxxxxx
            password:      xxxxxxxxxxxxx
            endpoint:      xxx.xxx.xxx.xxx
            insecure:      true
            port:          9440 # default port value
            clusterId:     xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx
            email:         xxx@xxxx.com
            vmUserName:    xxxxxxxx
            vmPassword:    xxxxxxxx
            vmHost:        xxx.xxx.xxx.xxx
            vmOS:          linux # windows/linux options - windows not yet supported
            crudDeclStrategy: uberMethodPerClass #lamba crud declaration strategy. options: <methodsPerClass, uberMethodPerClass, uberMethod>            

#
# Kubernetes parameters: If not in use, and Terraform
#                        is in use, physical infrastructure
#                        will be provisioned on the provider
#
        kubernetes:
            inUse:              false
            host:               https://xxx.xxx.xxx.xxx
            project:            xxxxxxxxxxxxxxxxx
            region:             us-central1-a     # options: any provider region
            hostTarget:         google            # option: google, aws, azure, nutanix
            username:           admin
            password:           5UhfcIPAPsiPXklT  # value to assign
            exposeAsService:    true
            serviceType:        LoadBalancer      # options: LoadBalancer, NodePort, ClusterIP
            useSessionAffinity: true

            
#            
# Artifact repository for build dependencies and binaries            
#
        artifact-repo:
            inUse:              false
            type:				jfrog                  # options: nexus, jfrog
            userName:           xxxxxxxx
            password:           xxxxxxxx
            email:              xxxx.xxxxxx@xxxxxxx.com
            repoUrl:            http://xxx.xxx.xxx.xxx:8081/repository/npm-public

            
#            
#  MongoDB parameters - defaults to a local accessible instance
#
#  If Terraform is in use, will attempt to instantiate a MongoDB instance via Docker image,
#  and use the instance IP address when binding the lambda functions    
#
        mongodb: 
            serverAddress:          localhost:27017
            databaseName:           lambdamongodemo
            searchSize:             10
            defaultCollectionName:  default_collection
            autoIncrementIdName:    _id
            autoIncrementSeqName:   seq
            mongooseHost:           http://localhost
            mongoosePort:           4000        
      
