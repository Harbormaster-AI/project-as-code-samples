#
# Standard DevOps project creation options.  
#
# Pay close attention to parameters that require values unique  
# to you, such as those for Git, Docker, and AWS.
#
# To use Git, Docker, and any provider, be sure to have created
# an account with each.  
#
# For Git, before generating the project be sure to create the 
# repository and designate as public before
#

project:
    name: Spring Core NoSQL Demo
    description: Sample Spring Core MongoDB project      
    techstack:
       name:                SpringMongoDB  
                                           # To see the list of available tech stacks on a Harbormaster instance using command:
                                           #     harbormaster_cli stack_list --output pretty

       name:             bowling-league-Sprint-1
                          # options:     Unique name of an existing model, a URL to a model file or Git repo, 
                          #                or full/relative path to a model file.
                          #
                          # To see the list of supported model types use command:
                          #      harbormaster_cli model_types_supported
                          #                          
                          # To see the list of available models on a Harbormaster instance use command:
                          #      harbormaster_cli model_list --output pretty
                          # 
                          # For JAR files and Git Repos with Java Files, include the root package names of the root package
#        javaRootPackageNames:
#          - com.freeport.bo    
#        primaryKeyPattern: _pojoName_Id # the pattern to look for when interrogating a POJO for a primary key field
                              # allowed values are a either a literal, ex: id OR 
                              # POJOName with a suffix, ex: _pojoName_Id will handle accountId, customerId, etc...                 

#
# DevOps Project Creation Options
#    	
    options:

#            
# Application parameters
#            
    
        application:
            name:                  springbootmongodbdemo
            description:           Demo Spring Boot project using MongoDB generated by Harbormaster
            author:                Dev Team
            email:                 xxxx.xxxxxxxxx@xxxxxxxx.com
            application logo URL:  ./img/turnstone.biologics.png
            company name:          Turnstone Biologics
            version:               0.0.1
            
            
#            
# Docker parameters
#            
        docker:
            userName:     xxxxxxxxxxxx
            password:     xxxxxxxxxxxx
            orgName:      xxxxxxxxxx
            repo:         springbootmongodbdemo
            tag:          latest
            host:         #empty uses docker hubd default             
             
#            
# CI/CD parameters
#            
        cicd:
            platform:  codeship    # options:  codeship, circleci, jfrog.pipelines
                                   #           jenkins, azure, aws, gitlab, 
                                   #           bitbucket, github
            AES key:               # codeship project key; ex: XKyy2IDcSptIIvMY8KLMVMcxVs+ZK6AyNu1B4Wu1DPY=


#
# Git repository parameters
#
        git:            
            name:        git_test_SpringCore      # an arbitrary name, but for JFrog, this should be the name of the Git related integration
            username:    xxxx
            password:    xxxx
            repository:  Spring
            tag:         latest
            host:        bitbucket.org            

#
# HashiCorp Terraform parameters
#
        terraform:
            inUse:             true	
            provider:          nutanix        # options: aws, google, azure, nutanix
            region:            us-east-1  # options: any cloud provider region
            ssh-fingerprint:   50:36:21:3f:3e:fd:de:fc:2f:1f:17:a6:09:6d:1b:dd
            
            
#
# AWS parameters
#
        aws:
            key-pair-name:     xxxxxxxxxxxx      
            vpc:               xxxxxxxxxxxxx        
            ec2-instance-type: t2.medium          # options: any AWS instance type
            access-key:        ASSIGN__ON_CICD_PLATFORM_AS_ENV_VARS
            secret-key:        ASSIGN__ON_CICD_PLATFORM_AS_ENV_VARS
            
#
# Nutanix parameters
#
        nutanix:
            inUse:         true
            userName:      xxxxxxxxxxxxxxxxxxxxxxxxx
            password:      xxxxxxxxxxxxxx
            endpoint:      xxx.xxx.xxx.xxx
            insecure:      true
            port:          xxxxx	
            clusterId:     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            email:         dev@harbormaster.ai
            vmUserName:    xxxxxxxxxxx
            vmPassword:    xxxxxxxxxxx
            vmHost:        xxx.xxx.xxx.3xxx
            vmOS:          linux	# options linux, windows - windows not yet supproted

#
# Kubernetes parameters: If not in use, and Terraform
#                        is in use, physical infrastructure
#                        will be provisioned on the provider
#
        kubernetes:
            inUse:              true
            host:               https://xxx.xxx.xxx.xxx
            project:            xxxxxxxxxxx        # assigned project name
            region:             us-central1-a      # options: any provider region
            hostTarget:         google             # option: google, aws, azure, nutanix
            username:           admin
            password:           5UhfcIPAPsiPXklT
            exposeAsService:    true
            serviceType:        LoadBalancer      # options: LoadBalancer, NodePort, ClusterIP
            useSessionAffinity: true

            
#            
# Artifact repository for build dependencies and binaries            
#
        artifact-repo:
            inUse:              false
            type:				nexus                  # options: nexus, jfrog
            userName:           xxxxxxx
            password:           xxxxxxxx
            email:              xxxx.xxxxxx@xxxxxxx.com
            repoUrl:            http://xxx.xxx.xxx.xxx:8081/repository/npm-public

            
#            
#  MongoDB parameters - defaults to a local accessible instance    
#
#  If Terraform is in use, will attempt to instantiate a MongoDB instance via Docker image,
#  and use the instance IP address when binding the lambda functions
#  
        mongodb: 
            server address:          localhost:27017
            database name:           angular7demo
            search size:             10
            default collection name: default_collection
            auto-increment id name:  _id
            auto-increment seq name: seq
            mongooseHost:            http://localhost
            mongoosePort:            4000        
      
        